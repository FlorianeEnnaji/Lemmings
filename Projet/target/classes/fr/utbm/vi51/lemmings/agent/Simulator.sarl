package fr.utbm.vi51.lemmings.^agent


import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.util.OpenEventSpaceSpecification
import java.util.UUID
import java.util.List
import fr.utbm.vi51.lemmings.model.Environment
import fr.utbm.vi51.lemmings.model.LemmingBody

agent Simulator{
	uses DefaultContextInteractions, Lifecycle

	var waitingAgents = 0
	
	on Initialize{
		var environment = (occurrence.parameters.get(0) as Environment)
			
		waitingAgents=environment.agentBodies.size+1
	
		var agentParameters : List<Object> = newArrayList( environment)
		for(var i = 4; i < occurrence.parameters.size; i++) {
			agentParameters += occurrence.parameters.get(i)
		}
		
		/*for( b : environment.agentBodies.keySet){
			var agentType = SpawnMapping.getAgentTypeForBody(b);
			spawnInContextWithID(Lemming.class,b,defaultContext,agentParameters.toArray)
		}*/
		
		
	}
	
	/*on SimulationAgentReady [!occurrence.fromMe] {
		synchronized(this) {
			waitingAgents --
			if (waitingAgents <= 0) {
				emit(new StartSimulation)
				killMe
			}
		}
	}*/
	
}